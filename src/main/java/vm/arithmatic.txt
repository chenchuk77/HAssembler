Command Return value (after popping the operand/s) Comment

add     x + y       Integer addition (2's complement)
sub     x − y       Integer subtraction (2's complement)
neg     − y         Arithmetic negation (2's complement)
eq      true if x = y and false otherwise           Equality
gt      true if x > y and false otherwise           Greater than
lt      true if x < y and false otherwise           Less than
and     x And y                                     Bit-wise
or      x Or y Bit-wise
not     Not y Bit-wise


argument Stores the function’s arguments. Allocated dynamically by the VM
implementation when the function is entered.

local Stores the function’s local variables. Allocated dynamically by the VM
implementation and initialized to 0 when the
function is entered.

static Stores static variables shared by all
functions in the same .vm file.
Allocated by the VM implementation for each
.vm file; shared by all functions in the .vm file.

constant Pseudo-segment that holds all the
constants in the range 0 ... 32767.
Emulated by the VM implementation;
Seen by all the functions in the program.

this / that
General-purpose segments. Can be made
to correspond to different areas in the
heap. Serve various programming needs.
Any VM function can use these segments to
manipulate selected areas on the heap.
pointer A two-entry segment that holds the base
addresses of the this and that
segments.
Any VM function can set Pointer 0 (or 1) to
some address; this has the effect of aligning the
this (or that) segment to the area on the heap
beginning in that address.
temp Fixed eight-entry segment that holds
temporary variables for general use.
May be used by any VM function for any
purpose. Shared by all functions in the program.




add
@SP
A=M // top of stack    x|x|x|x|b|a
D=M // d=a

@temp // temp = a
M=D

@SP
M=M-1
A=M // top of stack    x|x|x|x|b
D=M // d=b

@temp
D=M+D // d=a+b

@SP // no need to SP-- followed by SP++ (can do directly)
A=M






